name: Branch Protection

on:
  pull_request:
    branches: [ main ]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check PR title
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          test
          chore
        scopes: |
          core
          api
          infrastructure
          tests
          ci
        requireScope: false

  enforce-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Start MongoDB using docker compose
      run: |
        cd database
        docker compose up -d mongodb
        echo "Waiting for MongoDB to be ready..."
        sleep 15
        
        # Wait for MongoDB to be fully ready
        timeout 60 bash -c 'until docker exec minisocial-mongodb mongosh --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 2; done'
        echo "MongoDB is ready!"
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Run tests with coverage
      run: dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage
      env:
        MongoDb__ConnectionString: "mongodb://minisocial_user:minisocial_password@localhost:27017/minisocial?authSource=minisocial"
    
    - name: Stop MongoDB
      if: always()
      run: |
        cd database
        docker compose down
    
    - name: Install ReportGenerator
      if: always()
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
    
    - name: Generate Coverage Report
      if: always()
      run: |
        echo "Generating coverage report..."
        
        # Check if coverage files exist
        COVERAGE_FILES=$(find ./coverage -name "coverage.cobertura.xml" -o -name "*.xml" | grep -E "(coverage|cobertura)" | head -5 | tr '\n' ';')
        
        if [ -z "$COVERAGE_FILES" ]; then
          echo "‚ùå No coverage files found in ./coverage directory"
          echo "Contents of coverage directory:"
          ls -la ./coverage/ || echo "Coverage directory does not exist"
          exit 1
        fi
        
        echo "Found coverage files: $COVERAGE_FILES"
        
        # Generate reports
        reportgenerator \
          -reports:"$COVERAGE_FILES" \
          -targetdir:./coverage-report \
          -reporttypes:"Html;JsonSummary;Badges" \
          -verbosity:Info
    
    - name: Parse Coverage and Enforce Thresholds
      if: always()
      run: |
        echo "Parsing coverage data and enforcing thresholds..."
        
        # Set minimum coverage threshold (configurable)
        MIN_COVERAGE=80
        
        # Check if coverage summary exists
        if [ ! -f "./coverage-report/Summary.json" ]; then
          echo "‚ùå Coverage summary file not found"
          exit 1
        fi
        
        # Parse coverage percentage from JSON summary
        COVERAGE=$(cat ./coverage-report/Summary.json | grep -o '"linecoverage":"[0-9.]*"' | cut -d'"' -f4)
        
        if [ -z "$COVERAGE" ]; then
          echo "‚ùå Could not parse coverage percentage"
          exit 1
        fi
        
        # Convert to integer for comparison (remove decimal point)
        COVERAGE_INT=$(echo "$COVERAGE" | cut -d'.' -f1)
        
        echo "üìä Current Coverage: ${COVERAGE}%"
        echo "üéØ Required Coverage: ${MIN_COVERAGE}%"
        
        # Check threshold
        if [ "$COVERAGE_INT" -lt "$MIN_COVERAGE" ]; then
          echo ""
          echo "‚ùå COVERAGE BELOW THRESHOLD!"
          echo "   Current: ${COVERAGE}%"
          echo "   Required: ${MIN_COVERAGE}%"
          echo "   Shortfall: $((MIN_COVERAGE - COVERAGE_INT))%"
          echo ""
          echo "Please add more tests to increase coverage before merging."
          exit 1
        else
          echo ""
          echo "‚úÖ COVERAGE THRESHOLD MET!"
          echo "   Current: ${COVERAGE}%"
          echo "   Required: ${MIN_COVERAGE}%"
          echo "   Excess: $((COVERAGE_INT - MIN_COVERAGE))%"
        fi
    
    - name: Upload Coverage Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ./coverage-report/
        retention-days: 30
    
    - name: Upload Raw Coverage Data
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-data
        path: ./coverage/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    needs: enforce-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Security scan
      run: dotnet list package --vulnerable --include-transitive
